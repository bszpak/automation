#! /bin/bash

# Functions and Declarations

TASK1=create_product_user
TASK2=initial_install
TASK3=upgrade_pips
TASK4=upgrade_migration_pips
TASK5=release
TASK6=upload_firmware
TASK7=image
PREFIX="DJANGO_SETTINGS_MODULE=$PRODUCT.settings"
C7="TARGET_OS=centos7"
CMD1="fab -H $IP -p atxpassword $TASK1"
CMD2="fab -H $IP $TASK2"
CMD3="fab -H $IP $TASK3 $TASK4"


#EXIT SETUP
function _quit_()
{
    echo "Exiting setup ..."
    exit 0
}

#INVALID ENTRY
function _invalid_()
{
    echo "Invalid entry"
    exit 0
}

#GET PRODUCT
function _get_product_()
{
    read PRODUCT
}

#GET TARGET IP
function _get_targetip_()
{
    read -p "Target IP: " IP
}

#GET SSH USER
function _get_sshuser_()
{
    read -p "What username can I use to SSH into the machine? " SSHUSER
}

#GET OS TARGET
function _get_ostarget_()
{
    scp get_ostarget.sh $SSHUSER@$IP:/home/$SSHUSER/
    ssh -t $SSHUSER@$IP cd /home/$SSHUSER && ./get_ostarget.sh
}

# ADD ATX USER
function _add_atxuser_()
{
    ssh -t $SSHUSER@$IP <<-EOSSH
        if [ $SSHUSER == 'root' ]; then
            cd /$SSHUSER
        else
            cd /home/$SSHUSER
        fi
        id -u atxproduct >/dev/null 2>&1; echo $?      #check atxproduct user exists
        if [ $? == 0 ]; then
            echo "User 'atxproduct' already exists, moving on .. "
        else
            adduser atxproduct
            if [ $CENTOS == 'y' ]; then
                usermod -aG wheel atxproduct
            else
                usermod -aG admin atxproduct
            fi
            echo "atxproduct:atxpassword" | chpasswd
            sed -i -e 's|^PasswordAuthentication.*|PasswordAuthentication yes|' /etc/ssh/sshd_config
            if [ $CENTOS == 'y' ]; then
                systemctl restart sshd
            else
                service ssh restart
            fi
            echo "User 'atxproduct' created successfully!"
        fi
EOSSH
}

# REMOVE ATX USER
function _remove_atxuser_
{
    if [ $SSHUSER == 'root' ]; then
        userdel -r atxproduct
    else
        sudo userdel -r atxproduct
    fi
    id -u atxproduct >/dev/null 2>&1; echo $?      #check atxproduct user exists
    if [ $? == 0 ]; then
        echo "User still exists and could not be removed.  Try again."
        exit 1
    else
        echo "User removed successfully!"
        return 0
    fi
}

#VAGRANT VM SETUP
function _vagrant_vm_()
{
    echo
    read -p "Do you need to create a NEW Vagrant VM? (y/n) " NEWVM
    if [ $NEWVM == 'y' ]; then
        read -p "Host IP address where Vagrant VM will be provisioned: " HOSTIP
        read -p "Username on Host to SSH into the machine: " SSHUSER
        read -p "What product are we setting up? (ie. burnin, ip2av3, epgdata): " PRODUCT
        echo
        echo "NOTE: The Vagrant VM will be provisioned with a DHCP assigned IP address."
        read -p "NOTE: Ensure VirtualBox and Vagrant are already installed on Host machine before continuing.  Continue? (y/n) " CONTINUE
        if [ $CONTINUE == 'y' ] && [ $SSHUSER != 'root' ]; then
            ssh-copy-id -i ~/.ssh/id_rsa.pub $SSHUSER@$HOSTIP
            ssh -t $SSHUSER@$HOSTIP bash -c "'
                cd /home/$SSHUSER
                if [ ! -e build-targets ]; then
                    mkdir -p build-targets/$PRODUCT
                fi
                '"
            scp Vagrantfiles/Vagrantfile_$PRODUCT $SSHUSER@$HOSTIP:/home/$SSHUSER/build-targets/$PRODUCT/Vagrantfile
            ssh -t $SSHUSER@$HOSTIP bash -c "'
                cd /home/$SSHUSER/build-targets/$PRODUCT
                vagrant up
                '"

        elif [ $CONTINUE == 'y' ] && [ $SSHUSER == 'root' ]; then
            ssh-copy-id -i ~/.ssh/id_rsa.pub $SSHUSER@$HOSTIP
            ssh -t $SSHUSER@$HOSTIP bash -c "'
                cd /$SSHUSER
                if [ ! -e build-targets/$PRODUCT ]; then
                    mkdir -p build-targets/$PRODUCT
                fi
                '"
            scp Vagrantfiles/Vagrantfile_$PRODUCT $SSHUSER@$HOSTIP:/$SSHUSER/build-targets/$PRODUCT/Vagrantfile
            ssh -t $SSHUSER@$HOSTIP bash -c "'
                cd /$SSHUSER/build-targets/$PRODUCT
                vagrant up
                '"

        elif [ $CONTINUE == 'n' ]; then
            _quit_

        else
            _invalid_
        fi
    elif [ $NEWVM == 'n' ]; then
        SSHUSER=vagrant
        echo
        echo "Then please ensure the existing Vagrant VM is up and running before continuing."
        read -p "Enter VM IP address: " IP
        read -p "What product are we seting up? (ie. burnin, ip2av3, epgdata): " PRODUCT
        ssh-copy-id -i ~/.ssh/id_rsa.pub $SSHUSER@$IP
        echo
        echo "NOTE: An 'atxproduct' user with 'atxpassword' password must be present on target machine before continuing."
        read -p "Do we need to create one? (y/n) " ADDUSER
        if [ $ADDUSER == 'y' ]; then
            _add_atx_user_
        elif [ $ADDUSER == 'n' ]; then
            break
            return 0
        else
            _invalid_
        fi
    else
        _invalid_
    fi
}

#BARE METAL SETUP
function _bare_metal_()
{
    _targetip_
    read -p "Username on Host to SSH into the machine: " SSHUSER
    read -p "What product are we seting up? (ie. burnin, ip2av3, epgdata): " PRODUCT
    ssh-copy-id -i ~/.ssh/id_rsa.pub $SSHUSER@$IP
    echo
    echo "NOTE: An 'atxproduct' user with 'atxpassword' password must be present on target machine before continuing. "
    read -p "Do we need to create one? (y/n) " ADDUSER
    if [ $ADDUSER == 'y' ]; then
        _add_atx_user_
    elif [ $ADDUSER == 'n' ]; then
        break
        return 0
    else
        _invalid_
    fi
}

#CREATE PRODUCT USER
function _create_product_user_()
{
    echo
    echo "Creating product user..."
    cd /vagrant/vada/$PRODUCT
    if [ $PRODUCT = 'burnin' ]; then
        export $C7
    elif [ $PRODUCT = 'analogout' ] || [ $PRODUCT = 'epgdata' ] || [ $PRODUCT = 'ip2av3' ] || [ $PRODUCT = 'digistream' ]; then
        export $PREFIX
    else
        _invalid_
    fi
    fab -H $IP --sudo-password=atxpassword $TASK1
    echo "'create_product_user' task completed."
}

#INITIAL INSTALL
function _initial_install_()
{
    echo
    read -p "Proceed with 'initial_install'? (y/n) " INITIAL_INSTALL
    if [ $INITIAL_INSTALL == 'y' ]; then
        if [ $PRODUCT = 'burnin' ]; then
            export $C7
        elif [ $PRODUCT = 'analogout' ] || [ $PRODUCT = 'epgdata' ] || [ $PRODUCT = 'ip2av3' ] || [ $PRODUCT = 'digistream' ]; then
            export $PREFIX
        else
            _invalid_
        fi
        fab -H $IP $TASK2
    elif [ $INITIAL_INSTALL == 'n' ]; then
        echo
        echo "Guess we're done here."
        _quit_
    else
        _invalid_
    fi
    echo "'initial_install' task completed."
}

#UPGRADE PIPS
function _upgrade_pips_()
{
    echo
    read -p "Proceed with 'upgrade_pips' and 'upgrade_migration_pips'? (y/n) " UPGRADE_PIPS
    if [ $UPGRADE_PIPS == 'y' ]; then
        if [ $PRODUCT = 'burnin' ]; then
            export $C7
        elif [ $PRODUCT = 'analogout' ] || [ $PRODUCT = 'epgdata' ] || [ $PRODUCT = 'ip2av3' ] || [ $PRODUCT = 'digistream' ]; then
            export $PREFIX
        else
            _invalid_
        fi
        fab -H $IP $TASK3 $TASK4
    elif [ $UPGRADE_PIPS == 'n' ]; then
        echo
        echo "Then we're done!"
        _quit_
    else
        _invalid_
    fi
}

#IMAGE
