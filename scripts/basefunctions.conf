#! /bin/bash

function ssh_into_ciserver() {
    ssh -T $bamboo_CISERVER
} 

function ssh_into_container() {
    ssh -T atx@$bamboo_CISERVER_IP -p $bamboo_CONTAINER_PORT
}

function ssh_into_target() {
    ssh -T $bamboo_PRODUCT@$bamboo_TARGET_IP
}

function ssh_into_precise() {
    ssh -T ${bamboo_U12_BUILD_SERVER}
}

function ssh_into_bionic() {
    ssh -T ${bamboo_U18_BUILD_SERVER}
}

function ssh_into_proxmox() {
    ssh -T ${bamboo_PROXMOX}
}

#function reboot_target() {
#    echo "### INFO: System is rebooting ..."
#    ssh ${bamboo_PRODUCT}@${bamboo_TARGET_IP} "echo ${bamboo_SECRETPW} | sudo -S shutdown -r 1"
#}

function start_container() {
    echo "### INFO: Starting container \"${bamboo_CONTAINER_NAME}\"" 
    if docker ps | grep ${bamboo_CONTAINER_NAME}; then
        echo "Container already running, moving on..."
    else
        if docker ps -a | grep ${bamboo_CONTAINER_NAME}; then     # Container may have exited and just needs to be started
            echo "Starting container... "
            docker start ${bamboo_CONTAINER_NAME}
        else                                     		  # Container doesn't exist and needs to be instantiated
            echo "Running container..."
            cd ${bamboo_CONTAINER_PATH}/${bamboo_CONTAINER_NAME} && ./run.sh
        fi
    fi
    echo "### Container \"${bamboo_CONTAINER_NAME}\" started successfully ###"
}

# Bionic build-server or build-targets
function start_machine() {
    echo "### INFO: Starting machines ###"
    
    ## If call for Rollback, rollback VM to specific snapshot
    if [ "${SNAPSHOT}" ]; then
        echo "### INFO: Rolling back to Snapshot: '${SNAPSHOT}' ###"
        ssh -T ${bamboo_PROXMOX} "qm rollback ${bamboo_TARGET_VMID} ${SNAPSHOT}" || exit 1
    else
        ssh -T ${bamboo_PROXMOX} "qm start ${bamboo_TARGET_VMID}"
        if [ $? -eq 0 ]; then
	    if [[ ${bamboo_OS} = 'bionic' ]] || [[ ${bamboo_PRODUCT} = 'passport' ]]; then
                echo "### Starting ${bamboo_OS} build-server... please wait. ###"
    	    else
                echo "### Starting ${bamboo_PRODUCT}-target machine... please wait. ###"
 	    fi
            sleep 40
        else
	    if [[ ${bamboo_OS} = 'bionic' ]] || [[ ${bamboo_PRODUCT} = 'passport' ]]; then
                echo "### ${bamboo_OS} build-server already running. ###"
            else
                echo "### Target machine ${bamboo_PRODUCT}-target already running. ###"
	    fi
        fi
    fi
    echo "### Machine started successfully ###"
}

function start_qemu() {
    echo "### INFO: Starting ${bamboo_PRODUCT} build-target... ###"
    set -e
    cd ${REPOPATH}/passport/qemu-cloud

    if echo "$bamboo_AUTO_PASSWORD" | sudo -S ./run-qemu.sh; then
        echo '### qemu-vm starting... please wait. ###'
    else
        echo '### qemu-vm already running, moving on... ###'
    fi
    echo "### ${bamboo_PRODUCT} build-target started successfully ###"
}

function get_vars() {
# Store a filename in a variable minus the extension
GPG="$(cat latest-build.txt | grep \.gpg$)"
TXT="$(cat latest-build.txt | grep \.release.txt$)"
echo "### INFO: Retrieved $GPG and $TXT ..."
}

function sync_ntp() {
    echo "### Performing NTP sync on ${bamboo_PRODUCT} machine. ###"
    set -e
    if [[ ${bamboo_OS} = 'centos7' ]]; then
        echo "$bamboo_SECRETPW" | sudo -S systemctl stop ntpd.service
        echo "$bamboo_SECRETPW" | sudo -S ntpdate pool.ntp.org
        echo "$bamboo_SECRETPW" | sudo -S systemctl start ntpd.service

    elif [[ ${bamboo_OS} = 'precise' ]]; then
        echo "$bamboo_SECRETPW" | sudo -S service ntp stop
        echo "$bamboo_SECRETPW" | sudo -S ntpdate-debian
        echo "$bamboo_SECRETPW" | sudo -S service ntp start
    
    elif [[ ${bamboo_OS} = 'bionic' ]]; then
	echo "$bamboo_AUTO_PASSWORD" | sudo -S timedatectl set-ntp off
        echo "$bamboo_AUTO_PASSWORD" | sudo -S timedatectl set-ntp on
        timedatectl
    fi
    echo "### NTP sync successful on ${bamboo_PRODUCT} machine. ###"
}

function checkout() {
#    set -e
    if [ ${bamboo_CONTAINER_NAME} ]; then
	echo "### INFO: Performing source code checkout in docker container \"${bamboo_CONTAINER_NAME}\"... ###"
    elif [[ ${bamboo_OS} = 'bionic' ]] || [[ ${bamboo_OS} = 'precise' ]]; then 
	echo "### INFO: Performing source code checkout on \"${bamboo_OS}\" build server ... ###"
    fi

    # Basic git operations
    git clean -f
    git fetch
    git-lfs fetch
    git-lfs checkout

    # If re-running previously ran build, revert to original commit:
    if [ ! -z "${bamboo_RerunBuildTriggerReason_noOfRetries}" ]; then
        if [[ "${bamboo_BRANCH}" = "master" ]]; then
            echo "### INFO: Reverting to original specified branch/revision: \"${bamboo_BRANCH}\" ###"
            git reset --hard origin/"${bamboo_BRANCH}" || echo "git-reset returned $?"
        else
            echo "### Reverting to original branch/revision build run: ${bamboo_repository_git_branch} / ${bamboo_repository_revision_number}"
            git reset --hard "${bamboo_repository_revision_number}" || echo "git-reset returned $?"
        fi
    fi

    # If BRANCH var is specified:
    if [ ! -z "${bamboo_BRANCH}" ]; then
        echo "### Checking out from specified branch: \"${bamboo_BRANCH}\" ###"

        if git checkout -f ${bamboo_BRANCH}; then
            echo "### Successfully checked out from: \"${bamboo_BRANCH}\" ###"
        else
            exit 1
        fi

        if git pull; then
            echo "### git pull successful! ###"
        else
            git reset --hard origin/"${bamboo_BRANCH}"
        fi
    else
        git checkout -f ${bamboo_repository_git_branch}
        echo "### Successfully checked out from: ${bamboo_repository_git_branch} ###"
        if git pull; then
            echo "### git pull successful! ###"
        else
            git reset --hard origin/${bamboo_repository_git_branch}
        fi
    fi

    # Ensure latest git submodules
    if git submodule foreach git clean -f; then
        echo "### Successfully cleaned submodules. ###"
    fi
    if git submodule foreach git pull --ff-only origin master; then
        echo "### Successfully updated git submodules. ###"
    else
        echo "### ERROR: git submodules operation encountered an error, performing a git clean and re-pull ..."
        git submodule foreach git reset --hard origin master
        git submodule foreach git pull --ff-only origin master
    fi
    git show
    echo "### Checkout Complete ###"
}

function run_nodesetup() {
    echo "### INFO: Checking to see if NodeJS packages need updating... ###"
    set -e
    if diff ~/vada/package.json /tmp/package.json; then
        echo "### No changes found in package.json, moving on... ###"
    else
        echo "### Changes found between old and new package.json, re-compiling JS packages... ###"
        source ~/${bamboo_VENV}/bin/activate
        cd ~/vada && python atxstyle/atxstyle/nodesetup.py
    fi
    echo "### NodeJS Setup Complete ###"
}

function build_vada() {
    echo "### INFO: Beginning build operations... ###"
    set -e
    source ~/${bamboo_VENV}/bin/activate
    cd ~/vada/"${bamboo_PRODUCT}"
    export DJANGO_SETTINGS_MODULE="${bamboo_PRODUCT}".settings
    export BAMBOO_VERSION="${bamboo_VERSION}"

    if [ ${bamboo_OS} ]; then
        export TARGET_OS="${bamboo_OS}"
    fi

    if [[ ${bamboo_OS} = 'bionic' ]] || [[ ${bamboo_PRODUCT} = 'passport' ]]; then
	export TARGET_PYTHON=python3.6
	export TARGET_OS=bionic
	export INIT_SYSTEM=systemd
    fi	

    if  [[ ${bamboo_OS} = 'precise' ]]; then
        # Use specified Versative Version if supplied:
        if [[ "${bamboo_VERSATIVE_VERSION}" =~ [0-9].[0-9].[0-9].[0-9][0-9][0-9][0-9].[0-9][0-9][0-9] ]]; then
            echo "### Building with specified VERSATIVE_VERSION=${bamboo_VERSATIVE_VERSION} ###"
            export VERSATIVE_VERSION="${bamboo_VERSATIVE_VERSION}"
        else
            echo "### Using the default Versative version. ###"
        fi
	export BUILD=1
        export TARGET_PYTHON=python2.7
        export DEFAULT_SKU=${bamboo_PRODUCT}
        export TARGET_OS=precise
        export INIT_SYSTEM=SYSV
    fi

    fab -t 300 -T 3600 -H ${bamboo_TARGET_IP} --disable-known-hosts --sudo-password="${bamboo_SECRETPW}" release || exit 1
    echo "### Build Process Complete ###"
}

function build_embassy() {
    echo "### INFO: Beginning Embassy build operations... ###"
    set -e
    cd ~/repos/embassy/docker && echo "### INFO: Current directory is `pwd` ###"
    
    if [ ${BUILD} = 'binary' ]; then
        ARG=bin/embassy-arm64
    elif [ ${BUILD} = 'tarball' ]; then
        ARG=dist
    fi
    echo "### INFO: Creating the Embassy ${BUILD} ###"
    echo "${bamboo_SECRETPW}" | sudo -S ./run-docker-make.sh clean ${ARG}
}

function upgrade_target() {
    set -e
    if [ ${bamboo_OS} ]; then
        export TARGET_OS=${bamboo_OS}
    fi
    source ~/${bamboo_VENV}/bin/activate
    cd ~/vada/${bamboo_PRODUCT}
    export DJANGO_SETTINGS_MODULE=${bamboo_PRODUCT}.settings
    
    # If GPG_PACKAGE variable is populated, then use that value
    #if [ ! -z ${bamboo_GPG_PACKAGE} ]; then
    if [ ${bamboo_GPG_PACKAGE} ]; then
        echo "### INFO: Using specified gpg package ${bamboo_GPG_PACKAGE} ..."
        fab -H ${bamboo_TARGET_IP} --disable-known-hosts testrelease:builds/${bamboo_GPG_PACKAGE}

    #If GPG_PACKAGE variable is empty, then use latest package found @ .224
    #elif [ -z ${bamboo_GPG_PACKAGE} ]; then
    else
        echo "### INFO: Uploading latest gpg found in configserver for ${bamboo_PRODUCT} ..."
        fab -H ${bamboo_TARGET_IP} --disable-known-hosts download_firmware
    fi
}

function upload_fw() {
    echo "### INFO: Uploading build to configserver ###"
    set -e
    source ~/${bamboo_VENV}/bin/activate
    cd ~/vada/${bamboo_PRODUCT}
    fab upload_firmware

#    ./docker-fab.sh --disable-known-hosts --sudo-password=$bamboo_SECRETPW upload_firmware
    echo "### Upload FW Complete ###"
}

function copy_artifacts() {
    echo "### INFO: Copying artifacts to Bamboo build working directory ###"
    
    if [ ${bamboo_CONTAINER_PORT} ]; then
	scp -o StrictHostKeyChecking=no -P ${bamboo_CONTAINER_PORT} \
        atx@${bamboo_CISERVER_IP}:~/vada/"${bamboo_PRODUCT}"/builds/* "${bamboo_build_working_directory}" || exit 1

    elif [[ ${bamboo_OS} = 'precise' ]]; then
        scp -o StrictHostKeyChecking=no ${bamboo_U12_BUILD_SERVER}:~/vada/"${bamboo_PRODUCT}"/builds/* "${bamboo_build_working_directory}" || exit 1

    elif [[ ${bamboo_OS} = 'bionic' ]] || [[ ${bamboo_PRODUCT} = 'passport' ]]; then
        scp -o StrictHostKeyChecking=no ${bamboo_U18_BUILD_SERVER}:~/vada/"${bamboo_PRODUCT}"/builds/* "${bamboo_build_working_directory}" || exit 1
    fi
    echo "### Copy Artifacts Complete ###"
}

function print_version() {
    echo "======================"
    echo "  BUILD VERSION INFO  "
    echo "======================"
    if [ -f *.buildstamp.json ]; then
	cat *.buildstamp.json
    else
	cat *.release.txt
    fi
    echo "======================"
    echo "         END          "
    echo "======================"
}
